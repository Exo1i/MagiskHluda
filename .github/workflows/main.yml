name: CI

on:
  workflow_dispatch:
permissions:
  contents: write
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Cache vcpkg packages
        uses: actions/cache@v3
        with:
          path: |
            vcpkg
            ~/vcpkg/installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-
      - name: Setup vcpkg if not cached
        run: |
          if [ ! -d "vcpkg" ]; then
            git clone https://github.com/Microsoft/vcpkg.git
            cd vcpkg
            ./bootstrap-vcpkg.sh
           ./vcpkg install rapidjson restclient-cpp
            cd ..
          fi

      - name: Setup environment and run MagiskHluda
        run: |
          sudo apt install jq
          LATESTFLORIDARELEASETAG=$(curl -s https://api.github.com/repos/hzzheyang/strongR-frida-android/releases/latest | jq -r '.tag_name')
          LATESTMODULETAG=$(curl -s https://api.github.com/repos/Exo1i/MagiskHluda/releases/latest | jq -r '.tag_name')
          echo "LATESTFLORIDARELEASETAG=${LATESTFLORIDARELEASETAG}" >> $GITHUB_ENV
          echo "LATESTMODULETAG=${LATESTMODULETAG}" >> $GITHUB_ENV
          mkdir -p tmp/bin
          ./MagiskHluda
          echo "Setup completed"

  build:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [ arm, arm64, x86, x86_64 ]
      fail-fast: true
    steps:
      - uses: actions/checkout@v3
      - name: Cache vcpkg packages
        uses: actions/cache@v3
        with:
          path: |
            vcpkg
            ~/vcpkg/installed
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/vcpkg.json', '**/vcpkg-configuration.json') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-
      - name: Setup vcpkg if not cached
        run: |
          if [ ! -d "vcpkg" ]; then
            git clone https://github.com/Microsoft/vcpkg.git
            cd vcpkg
            ./bootstrap-vcpkg.sh
            cd ..
          fi
      - name: Create Release Archive for ${{ matrix.arch }}
        run: |
          FILENAME="florida-$([[ "${{ matrix.arch }}" == "x86_64" ]] && echo "x64" || echo "${{ matrix.arch }}").gz"
          mkdir -p arch_release/tmp/bin
          cp -r tmp/* arch_release/
          cp "tmp/bin/$FILENAME" "arch_release/tmp/bin/"
          (cd arch_release && zip -r "../Magisk-Florida-${{ matrix.arch }}-$LATESTFLORIDARELEASETAG.zip" .)

  universal_release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create universal zip package
        run: |
          mkdir -p universal_release/tmp/bin
          cp -r tmp/* universal_release/
          (cd universal_release && zip -r "../Magisk-Florida-Universal-${LATESTFLORIDARELEASETAG}.zip" .)

  release:
    needs: universal_release
    runs-on: ubuntu-latest
    steps:
      - name: Release Packages
        uses: ncipollo/release-action@v1.13.0
        with:
          artifacts: |
            ./*.zip
            update.json
          name: "Magisk Module for Florida Server ${{ env.LATESTFLORIDARELEASETAG }}"
          tag: "${{ env.LATESTFLORIDARELEASETAG }}"
          body: "Universal package and architecture-specific packages for Florida Server ${{env.LATESTFLORIDARELEASETAG}}"
          generateReleaseNotes: false
          token: ${{ secrets.GITHUB_TOKEN }}
