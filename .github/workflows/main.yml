name: CI

on:
  workflow_dispatch:
permissions:
  contents: write
jobs:
  runner:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
    steps:
      - uses: actions/checkout@v3
      - name: Get latest release of hluda and latest version magisk module built
        run: |
          sudo apt install jq
          LATESTHLUDARELEASETAG=$(curl -s https://api.github.com/repos/hzzheyang/strongR-frida-android/releases/latest | jq -r '.tag_name')
          LATESTMODULETAG=$(curl -s https://api.github.com/repos/Exo1i/MagiskHluda/releases/latest | jq -r '.tag_name')
          echo "LATESTHLUDARELEASETAG=${LATESTHLUDARELEASETAG}" >> $GITHUB_ENV
          echo "latest release: ${LATESTHLUDARELEASETAG}"
          echo "LATESTMODULETAG=${LATESTMODULETAG}" >> $GITHUB_ENV
          echo "latest module tag: ${LATESTMODULETAG}"

      - name: Create Release Archive and Set Tag Information
        if: ${{env.LATESTMODULETAG != env.LATESTHLUDARELEASETAG && env.LATESTHLUDARELEASETAG != 'null' && env.LATESTMODULETAG !='null'}}
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          ./bootstrap-vcpkg.sh
          ./vcpkg install rapidjson restclient-cpp
          cd ..
          mkdir release 
          cmake -B release -S . -DCMAKE_TOOLCHAIN_FILE=vcpkg/scripts/buildsystems/vcpkg.cmake
          cd release
          cmake --build .
          ./MagiskHluda
          if [[ $? -ne 0 ]]; then
            echo "MagiskHluda failed with exit code $?"
            exit 1
          fi
          echo "MagiskHluda succeeded"
          (cd ./tmp && zip -r ../Magisk-Hluda-$LATESTHLUDARELEASETAG.zip ./*)
          TAG=$(cat currentTag.txt)
          echo "NEW_TAG=$TAG" >> $GITHUB_ENV

      - name: Release
        if: ${{env.LATESTMODULETAG != env.LATESTHLUDARELEASETAG && env.LATESTHLUDARELEASETAG != 'null' && env.LATESTMODULETAG !='null'}}
        uses: ncipollo/release-action@v1.13.0
        with:
          artifacts: ./release/*.zip
          name: "Magisk Module for Hluda Server ${{ env.NEW_TAG }}"
          tag: "${{ env.NEW_TAG }}"
          body: "${{env.LATESTHLUDARELEASETAG}} released!"
          generateReleaseNotes: false
          omitBody: false
          omitBodyDuringUpdate: false
          omitDraftDuringUpdate: false
          omitName: false
          omitNameDuringUpdate: false
          omitPrereleaseDuringUpdate: false
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
